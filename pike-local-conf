[[local|localrc]]

# Minimal Contents
# ----------------

# While ``stack.sh`` is happy to run without ``localrc``, devlife is better when
# there are a few minimal variables set:

# If the ``*_PASSWORD`` variables are not set here you will be prompted to enter
# values for them by ``stack.sh``and they will be added to ``local.conf``.
ADMIN_PASSWORD=nomoresecret
DATABASE_PASSWORD=stackdb
RABBIT_PASSWORD=stackqueue
SERVICE_PASSWORD=$ADMIN_PASSWORD

# ``HOST_IP`` and ``HOST_IPV6`` should be set manually for best results if
# the NIC configuration of the host is unusual, i.e. ``eth1`` has the default
# route but ``eth0`` is the public interface.  They are auto-detected in
# ``stack.sh`` but often is indeterminate on later runs due to the IP moving
# from an Ethernet interface to a bridge on the host. Setting it here also
# makes it available for ``openrc`` to include when setting ``OS_AUTH_URL``.
# Neither is set by default.
#HOST_IP=w.x.y.z
#HOST_IPV6=2001:db8::7
HOST_IP=10.145.73.17
PUBLIC_INTERFACE=ens192

# Logging
# -------

# By default ``stack.sh`` output only goes to the terminal where it runs.  It can
# be configured to additionally log to a file by setting ``LOGFILE`` to the full
# path of the destination log file.  A timestamp will be appended to the given name.
LOGFILE=$DEST/logs/stack.sh.log

# Old log files are automatically removed after 7 days to keep things neat.  Change
# the number of days by setting ``LOGDAYS``.
LOGDAYS=2

# Nova logs will be colorized if ``SYSLOG`` is not set; turn this off by setting
# ``LOG_COLOR`` false.
#LOG_COLOR=False


# Using milestone-proposed branches
# ---------------------------------

CINDER_BRANCH=stable/pike
CINDERCLIENT_BRANCH=stable/pike
GLANCE_BRANCH=stable/pike
GLANCECLIENT_BRANCH=stable/pike
HORIZON_BRANCH=stable/pike
KEYSTONE_BRANCH=stable/pike
KEYSTONECLIENT_BRANCH=stable/pike
NOVA_BRANCH=stable/pike
NOVACLIENT_BRANCH=stable/pike
NEUTRON_BRANCH=stable/pike
NEUTRONCLIENT_BRANCH=stable/pike
SWIFT_BRANCH=stable/pike
REQUIREMENTS_BRANCH=stable/pike
NOVNC_BRANCH=stable/pike

disable_service n-novnc
disable_service tempest
disable_service n-net
disable_service heat
disable_service cinder

disable_service s-proxy
disable_service s-object
disable_service s-container
disable_service s-account

disable_service c-api
disable_service c-vol
disable_service c-sch

disable_service heat
disable_service h-api
disable_service h-api-cfg
disable_service h-api-cw
disable_service h-eng

disable_service ceilometer-acompute ceilometer-acentral
disable_service ceilometer-anotification
disable_service ceilometer-collector ceilometer-api
disable_service ceilometer-alarm-notifier ceilometer-alarm-evaluator

enable_service neutron q-svc q-agt
enable_service q-dhcp
enable_service q-l3
enable_service q-meta
enable_service q-lbaasv2
enable_service n-api

enable_plugin neutron-lbaas https://github.com/openstack/neutron-lbaas.git stable/pike
enable_plugin f5lbaas-driver https://github.com/F5Networks/f5-openstack-lbaasv2-driver.git stable/pike
enable_plugin f5lbaas-agent https://github.com/F5Networks/f5-openstack-agent.git 9.8-stable

enable_plugin barbican https://github.com/openstack/barbican.git stable/pike
enable_plugin python-barbicanclient https://github.com/openstack/python-barbicanclient.git stable/pike
enable_service rabbit mysql key

LIBVIRT_FIREWALL_DRIVER=nova.virt.firewall.NoopFirewallDriver
Q_USE_SECGROUP=True

IP_VERSION=4
NEUTRON_CREATE_INITIAL_NETWORKS=False
PUBLIC_BRIDGE=br-ex
Q_USE_PROVIDERNET_FOR_PUBLIC=True
OVS_PHYSICAL_BRIDGE=$PUBLIC_BRIDGE
PHYSICAL_NETWORK=physnet
PROVIDER_NETWORK_TYPE=flat
Q_ML2_PLUGIN_TYPE_DRIVERS=flat,vxlan

PIP_UPGRADE=True

LIBVIR_TYPE=qemu

RECLONE=False
# Uncomment these to grab the milestone-proposed branches from the
# repos:
#CINDER_BRANCH=milestone-proposed
#GLANCE_BRANCH=milestone-proposed
#HORIZON_BRANCH=milestone-proposed
#KEYSTONE_BRANCH=milestone-proposed
#KEYSTONECLIENT_BRANCH=milestone-proposed
#NOVA_BRANCH=milestone-proposed
#NOVACLIENT_BRANCH=milestone-proposed
#NEUTRON_BRANCH=milestone-proposed
#SWIFT_BRANCH=milestone-proposed

# Using git versions of clients
# -----------------------------
# By default clients are installed from pip.  See LIBS_FROM_GIT in
# stackrc for details on getting clients from specific branches or
# revisions.  e.g.
# LIBS_FROM_GIT="python-ironicclient"
# IRONICCLIENT_BRANCH=refs/changes/44/2.../1

# Swift
# -----

# Swift is now used as the back-end for the S3-like object store. Setting the
# hash value is required and you will be prompted for it if Swift is enabled
# so just set it to something already:
SWIFT_HASH=66a3d6b56c1f479c8b4e70ab5c2000f5

# For development purposes the default of 3 replicas is usually not required.
# Set this to 1 to save some resources:
SWIFT_REPLICAS=1

# The data for Swift is stored by default in (``$DEST/data/swift``),
# or (``$DATA_DIR/swift``) if ``DATA_DIR`` has been set, and can be
# moved by setting ``SWIFT_DATA_DIR``. The directory will be created
# if it does not exist.
SWIFT_DATA_DIR=$DEST/data
